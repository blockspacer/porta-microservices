From 9d919a948142e32bddbd3ecef933b7ce725eed21 Mon Sep 17 00:00:00 2001
From: Stanislav Sevriuk <Stanislav.Sevriuk@portaone.com>
Date: Tue, 22 May 2018 17:12:24 +0300
Subject: [PATCH] BE-1679 Add special monitoring for demonstration

The cumulative stats are dumped into a special *.stats every 10 sec.
Overflow protection is guaranteed by the Math::BigInt module.

NB. Should not be merged.

Change-Id: I411ea03d71b9ad1ea82fcbdfbd49d292b79c8b83
---

diff --git a/scripts/radsensor b/scripts/radsensor
index 41f3ebb..2291a25 100755
--- a/scripts/radsensor
+++ b/scripts/radsensor
@@ -24,6 +24,8 @@
 use AnyEvent ();
 use Const::Fast;
 use Coro ();
+use IO::File;
+use Math::BigInt;
 use POSIX qw(:signal_h);
 use Sys::CPU qw(cpu_count);
 
@@ -46,6 +48,7 @@
 
 use constant {
     DEFAULT_TICK_PERIOD       => 5,
+    CUMULATIVE_TICK_PERIOD    => 10,
     MONITOR_TICK_PERIOD       => 60,     # one minute
     CLUSTER_STATE_TICK_PERIOD => 300,    # five minutes
     DISABLED_TICK_PERIOD      => -1,     # disabled
@@ -55,6 +58,8 @@
     CORO_ITERATION_DURATION => 0.5,    # 500 milliseconds
     CORO_MAX_DEFER_DURATION => 1,      # 1 seconds
 };
+
+use constant STATS_FILE => '/var/run/porta-one/radiusd/radiusd-cluster.stats';
 
 const my $_DISPATCHER_UNI     => 0;
 const my $_DISPATCHER_SMP     => 1;
@@ -68,6 +73,10 @@
 my %monitor_status = ();
 my $global = Porta::Cluster::Statistics->new;
 my ( $local_ip, $graceful );
+
+my %cumulative_stats = map {
+    $_ => Math::BigInt->bzero(),
+} qw(in out lost badauth badclnt badtime badreq be_error proc proc_cnt queue queue_cnt);
 
 my %stat_types = (
     'local'   => [qw(cpu_master cpu_sensor cpu_slaves mem_master mem_sensor mem_slaves)],
@@ -88,6 +97,52 @@
             foreach my $sibling ( siblings() ) {
                 $r->send( 'type' => 'slavepong', %$sibling );
             }
+            return 1;
+        },
+    },
+    cumulative => {
+        watcher => undef,
+        tick_period => CUMULATIVE_TICK_PERIOD,
+        do_periodic => sub {
+            my $timestamp = AE::now();
+
+            my $requests_pending = $cumulative_stats{out}->copy();
+            for my $key (qw(in lost)) {
+                $requests_pending->bsub( $cumulative_stats{$key} );
+            }
+
+            my $requests_failed = $cumulative_stats{badauth}->copy();
+            for my $key (qw(badclnt badtime badreq)) {
+                $requests_failed->badd( $cumulative_stats{$key} );
+            }
+
+            my $proc = $cumulative_stats{proc};
+            if ( !$cumulative_stats{proc_cnt}->is_zero() ) {
+                $proc->bdiv( $cumulative_stats{proc_cnt} );
+                $cumulative_stats{proc}     = Math::BigInt->bzero();
+                $cumulative_stats{proc_cnt} = Math::BigInt->bzero();
+            }
+
+            my $queue = $cumulative_stats{queue};
+            if ( !$cumulative_stats{queue_cnt}->is_zero() ) {
+                $queue->bdiv( $cumulative_stats{queue_cnt} );
+                $cumulative_stats{queue}     = Math::BigInt->bzero();
+                $cumulative_stats{queue_cnt} = Math::BigInt->bzero();
+            }
+
+            my $fh = IO::File->new( STATS_FILE, O_CREAT | O_WRONLY | O_TRUNC );
+            if ($fh) {
+                printf $fh "requests=%s\nrequests_pending=%s\nrequests_lost=%s\nrequests_failed=%s\nbe_errors=%s\nproc=%s\nqueue=%s\n",
+                    $cumulative_stats{in}->bstr(),
+                    $requests_pending->bstr(),
+                    $cumulative_stats{lost}->bstr(),
+                    $requests_failed->bstr(),
+                    $cumulative_stats{be_error}->bstr(),
+                    $proc->bstr(),
+                    $queue->bstr();
+                undef $fh;
+            }
+
             return 1;
         },
     },
@@ -224,6 +279,19 @@
     }
     $slave->update($msg->data);
 
+    for my $key ( keys %cumulative_stats ) {
+        next if ( !$msg->{$key} );
+        my $item = $slave->items($key);
+        if ( ( $key ne 'proc' ) && ( $key ne 'queue' ) ) {
+            $cumulative_stats{$key}->badd( $item->diff( count => 2 ) );
+        }
+        else {
+            my $prev = $item->prev();
+            $cumulative_stats{$key}->badd( $prev->total );
+            $cumulative_stats{ $key . '_cnt' }->badd( $prev->count );
+        }
+    }
+
     # skip retirement checks for slavepong responses
     return SLAVE_OK if ( exists $msg->{pid} );
 
diff --git a/site_lib/Porta/StatItem.pm b/site_lib/Porta/StatItem.pm
index e8f95a8..a1844bf 100644
--- a/site_lib/Porta/StatItem.pm
+++ b/site_lib/Porta/StatItem.pm
@@ -99,27 +99,25 @@
 }
 
 sub diff {
-    my $self = shift;
+    my ( $self, %args ) = @_;
 
-    my %args  = @_;
-    my $count = $args{count};
+    my $last = $self->pointsGet(-1);
+    return 0 if ( !$last );
 
-    $count = 0 unless (defined($count)
-        && $count >= 0
-        && $count < $self->pointsCount() + 1);
+    my $first = $self->pointsGet( -1 * ( $args{count} || 0 ) );
 
-    my $first = $self->pointsGet(-1 * $count);
-    my $last  = $self->pointsGet(-1);
-
-    my $result;
-    if (defined($first) && defined($last)) {
-        $result = $last->value(last => 1) - $first->value(last => 1);
-    }
-    else {
-        $result = 0;
+    if ( !$first || ( $last == $first ) ) {
+        return 0;
     }
 
-    return $result;
-}
+    $last = $last->value( last => 1 );
+    $first = $first->value( last => 1 );
+
+    if ( $last >= $first ) {
+        return $last - $first;
+    }
+
+    return $last;
+} ## end sub diff
 
 1;
